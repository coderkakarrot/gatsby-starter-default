import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { DrupalState, fetchJsonapiEndpoint } from '@pantheon/decoupled-node-sdk';

import styles from '../../styles/Home.module.css';

const drupalUrl = process.env.backendUrl;

export default function Home({ article }) {
  const imgSrc = drupalUrl + article.field_media_image?.field_media_image?.uri?.url;
  return (
    <div className={styles.container}>
      <Head>
        <title>Decoupled Next Drupal Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="prose lg:prose-xl mt-10">
        <h1>
          {article.title}
        </h1>

        <Link passHref href="/">
          <span className="w-full underline cursor-pointer">Home &rarr;</span>
        </Link>

        <div className="mt-12 max-w-lg mx-auto lg:grid-cols-3 lg:max-w-screen-lg">
          <div className="relative w-full rounded-lg shadow-lg overflow-hidden mb-10" style={{ height: '50vh' }}>
            <Image src={imgSrc} layout="fill" objectFit="cover" alt={article.title} />
          </div>
          <div dangerouslySetInnerHTML={{__html: article.body.value}} />
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getStaticPaths() {
  // TODO - determine this from environment variables
  const store = new DrupalState({
    apiRoot: `${drupalUrl}/en/jsonapi/`,
  });

  const articles = await store
    .getObject({
      objectName: 'node--article',
      query: `
        {
          id
          path {
            alias
          }
        }
      `
    });

  // Using the path alias here would be preferred but we'll first need to add
  // filter support to DrupalGraphqlLink.
  const paths = articles.map(article => {
    const slug = article.path.alias.split('/');
    slug.shift();
    slug.shift();
    return { params: { slug: slug } };
  });

  return {
    paths,
    fallback: false,
  }
}

export async function getStaticProps(context) {
  // TODO - determine apiRoot from environment variables
  const store = new DrupalState({
    apiRoot: `${drupalUrl}/en/jsonapi`,
  });

  const slug = `/articles/${context.params.slug.join('/')}`;

  // TODO:
  // * Use subrequests.
  // * Add helper to Drupal State.
  const uuid = await fetch(`${drupalUrl}/en/router/translate-path?path=${slug}`)
    .then(response => response.json())
    .then(data => data.entity.uuid || false)
    .catch(error => console.error('Decoupled router fetch failed', error));

  // if preview, use preview endpoint and add to store.
  if (context?.previewData?.key) {
    const previewData = await fetchJsonapiEndpoint(`${drupalUrl}/en/jsonapi/decoupled-preview/${context.previewData.key}?include=field_media_image.field_media_image`);
    store.setState({ 'node--articleResources': { [uuid]: previewData } });
  }
  // If preview mode, get the preview data from the store, other wise fetch from the api.
  store.params.addInclude(['field_media_image.field_media_image']);
  const article = await store
    .getObject({
      objectName: 'node--article',
      id: uuid,
      query: `
        {
          id
          title
          body
          path {
            alias
          }
          field_media_image {
            field_media_image {
              uri {
                url
              }
            }
          }
        }
      `
    });

  return {
    props: {
      article,
      revalidate: 60,
    },
  }
}
